# -*- coding: utf-8 -*-
"""GeneticQuantPlayground.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-MMQB-f1dfd_o9AYYf_vPrdVzqK5c23b
"""

import numpy as np
import random

def initialize_population(population_size, chromosome_length):
    population = []
    for _ in range(population_size):
        individual = np.random.uniform(low=0.0, high=1.0, size=chromosome_length)
        population.append(individual)
    return population

def evaluate_fitness(population, fitness_function):
    fitness_scores = []
    for individual in population:
        fitness = fitness_function(individual)
        fitness_scores.append(fitness)
    return fitness_scores

def selection(population, fitness_scores, num_selected):
    selected_population = []
    for _ in range(num_selected):
        selected_index = np.argmax(fitness_scores)
        selected_population.append(population[selected_index])
        fitness_scores[selected_index] = float('-inf')  # Set the fitness score to negative infinity to avoid re-selection
    return selected_population

def crossover(parent1, parent2):
    crossover_point = random.randint(1, len(parent1) - 1)
    child1 = np.concatenate((parent1[:crossover_point], parent2[crossover_point:]))
    child2 = np.concatenate((parent2[:crossover_point], parent1[crossover_point:]))
    return child1, child2

def mutation(individual, mutation_rate):
    mutated_individual = individual.copy()
    for i in range(len(mutated_individual)):
        if random.random() < mutation_rate:
            mutated_individual[i] = random.uniform(0.0, 1.0)
    return mutated_individual